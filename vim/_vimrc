"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""" General config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:let g:netrw_dirhistmax = 0
:set noswapfile
:colorscheme vividchalk
:filetype plugin indent on
:set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
:set shell=powershell
:set shellcmdflag=-command
:syntax on
:set ignorecase
:set smartcase
:set nu
:map <C-s> :w <Enter>
:inoremap <c-s> <Esc>:update<CR>
:vmap <c-s> <Esc><c-s>gv
:autocmd BufWritePre *.* :%s/\s\+$//e
:set laststatus=2

if has("gui_running")
    set lines=999 columns=999
    if has("gui_win32")
        set guifont=DejaVu_Sans_Mono_for_Powerline:h12
        set go+=a "make selection to save into clipboard. win only cuz unix already has it and i use only GVIM
    else
        set guifont=Inconsolas\ 12
    endif
endif

" Indent set on tab in normal and visual mode
:nnoremap <Tab> >>
:nnoremap <S-Tab> <<
:vnoremap <Tab> >gv
:vnoremap <S-Tab> <gv
" For insert mode let's make only reverse indent
:inoremap <S-Tab> <C-D>

:set encoding=utf-8
:set termencoding=utf-8
:set fileencoding=utf-8
:set fileencodings=utf8,latin1,koi8r,cp932,cp1251,cp866,ucs-2le
:set omnifunc=syntaxcomplete#Complete
"Execute Explore if no files are passed.
if argc() == 0 && !exists("s:std_in")
    autocmd vimenter * Explore 
endif

"store viminfo with vim dir
set viminfo+=n$VIM/_viminfo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""" Complete settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use smartcase.
:let g:acp_enableAtStartup = 1

"Close popup window by space
:inoremap <expr><Space> pumvisible() ? "\<C-e>" : "\<Space>"
"Make Enter to finish completion
:inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

:autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
:autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
:autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
:autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
:autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

:set completeopt=longest,menuone
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

":set statusline=%f%m%r%h%w\ %y\ enc:%{&enc}\ ff:%{&ff}\ fenc:%{&fenc}%=(ch:%3b\ hex:%2B)\ col:%2c\ line:%2l/%L\ [%2p%%]
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""" LightLine config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified',
      \   'filename': 'MyFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return "-"
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? _ : ''
  endif
  return ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? ( expand('%:t') . ':' . getpos('.')[1]) : '[No Name]')
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""" Function config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
" Convert tab to spaces
function! Convert_tab(space_number)
    let l:white_space = repeat(" ", a:space_number)
    execute ":%s/\t/" . l:white_space . "/g"
endfunction

function! Spell_check(type)
    execute "setlocal spell! spelllang=" . a:type
endfunction

:command NoTab call Convert_tab("4")

:command EnSpellCheck call Spell_check("en_gb")
:command RuSpellCheck call Spell_check("ru")
:command Vimrc tabedit $MYVIMRC
